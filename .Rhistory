points(beta_vec, abs(zz3), col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
points(beta_vec, abs(zz4), col=bob[2], pch=16, cex=0.7, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste("|", alpha[1], "|, q=2")),
expression(paste("|", alpha[2], "|, q=2"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
dev.off()
# 1. Signed Activity Score
tmpf1 <- function(x) coactivity(x,1)[1]
tmpf2 <- function(x) coactivity(x,1)[2]
tmpf3 <- function(x) coactivity(x,2)[1]
tmpf4 <- function(x) coactivity(x,2)[2]
beta_vec <- seq(-10, 10, by=0.25)
zz1 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf1(beta_vec[zz]))))
zz2 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf2(beta_vec[zz]))))
zz3 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf3(beta_vec[zz]))))
zz4 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf4(beta_vec[zz]))))
png(filename="figs/simple_ex2_v2.png", width=3.5, height=5, units="in", res=300)
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(c(zz1, zz2)),
xlab=expression(paste(beta)), ylab="Co-activity score", bty='n')
points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz3, col=bob[1], pch=0, cex=0.5, lwd=1)
points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
#points(beta_vec, zz4, col=bob[2], pch=1, cex=0.5, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste(alpha[1], ", q=1")),
expression(paste(alpha[2], ", q=1"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
dev.off()
png(filename="figs/simple_ex2b_v2.png", width=3.5, height=5, units="in", res=300)
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(abs(c(zz3, zz4))),
xlab=expression(paste(beta)), ylab="Signed co-activity score", bty='n')
#points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
points(beta_vec, abs(zz3), col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
points(beta_vec, abs(zz4), col=bob[2], pch=16, cex=0.7, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste("|", alpha[1], "|, q=2")),
expression(paste("|", alpha[2], "|, q=2"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
dev.off()
beta_vec <- seq(-30, 10, by=0.25)
zz1 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf1(beta_vec[zz]))))
zz2 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf2(beta_vec[zz]))))
zz3 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf3(beta_vec[zz]))))
zz4 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf4(beta_vec[zz]))))
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(c(zz1, zz2)),
xlab=expression(paste(beta)), ylab="Co-activity score", bty='n')
points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz3, col=bob[1], pch=0, cex=0.5, lwd=1)
points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
beta_vec <- seq(-300, 10, by=0.25)
zz1 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf1(beta_vec[zz]))))
zz2 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf2(beta_vec[zz]))))
zz3 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf3(beta_vec[zz]))))
zz4 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf4(beta_vec[zz]))))
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(c(zz1, zz2)),
xlab=expression(paste(beta)), ylab="Co-activity score", bty='n')
points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz3, col=bob[1], pch=0, cex=0.5, lwd=1)
points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
#points(beta_vec, zz4, col=bob[2], pch=1, cex=0.5, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste(alpha[1], ", q=1")),
expression(paste(alpha[2], ", q=1"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
beta_vec <- seq(-10, 10, by=0.25)
zz1 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf1(beta_vec[zz]))))
zz2 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf2(beta_vec[zz]))))
zz3 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf3(beta_vec[zz]))))
zz4 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf4(beta_vec[zz]))))
coactivity2 <- function(beta,q=1){
C12 <- C12_f(beta)
V12 <- (C12+ t(C12))/2
Eig <- eigen(V12)
a <- rep(NA, nrow(Eig$vectors))
for(i in 1:nrow(Eig$vectors)){
a[i] <- sum(abs(Eig$values[1:q])*Eig$vectors[i,1:q]^2)
}
return(a)
}
# 1. Signed Activity Score
tmpf1 <- function(x) coactivity(x,1)[1]
tmpf2 <- function(x) coactivity(x,1)[2]
tmpf3 <- function(x) coactivity(x,2)[1]
tmpf4 <- function(x) coactivity(x,2)[2]
beta_vec <- seq(-10, 10, by=0.25)
zz1 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf1(beta_vec[zz]))))
zz2 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf2(beta_vec[zz]))))
zz3 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf3(beta_vec[zz]))))
zz4 <- Re(unlist(lapply(seq_along(beta_vec), function(zz) tmpf4(beta_vec[zz]))))
png(filename="figs/simple_ex2_v2.png", width=3.5, height=5, units="in", res=300)
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(c(zz1, zz2)),
xlab=expression(paste(beta)), ylab="Co-activity score", bty='n')
points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz3, col=bob[1], pch=0, cex=0.5, lwd=1)
points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
#points(beta_vec, zz4, col=bob[2], pch=1, cex=0.5, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste(alpha[1], ", q=1")),
expression(paste(alpha[2], ", q=1"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
dev.off()
png(filename="figs/simple_ex2b_v2.png", width=3.5, height=5, units="in", res=300)
bob <- RColorBrewer::brewer.pal(2, "Set1")
plot(NULL, xlim=c(-10, 10), ylim=range(abs(c(zz3, zz4))),
xlab=expression(paste(beta)), ylab="Absolute signed co-activity score", bty='n')
#points(beta_vec, zz1, col=bob[1], pch=15, cex=0.7, lwd=1)
points(beta_vec, abs(zz3), col=bob[1], pch=15, cex=0.7, lwd=1)
#points(beta_vec, zz2, col=bob[2], pch=16, cex=0.7, lwd=1)
points(beta_vec, abs(zz4), col=bob[2], pch=16, cex=0.7, lwd=1)
#legend("bottomright",
#       c(expression(paste(alpha[1],", q=1")),
#         expression(paste(alpha[1],", q=2")),
#         expression(paste(alpha[2],", q=1")),
#         expression(paste(alpha[2],", q=2"))
#         ),
#       bty='n', col=bob[c(1,1,2,2)], pch=c(15,0,16,1), cex=1)
legend("top",
c(expression(paste("|", alpha[1], "|, q=2")),
expression(paste("|", alpha[2], "|, q=2"))
),
bty='n', col=bob[c(1,2)], pch=c(15,16), cex=1)
dev.off()
f <- function(x){
x[1]^2 + x[1]*x[2]
}
g <- function(x){
x[1]^2 + x[1]*x[2] + x[2]^3/9
}
Ctrue <- matrix(c(8/3, 10/9, 11/12, 7/18), nrow=2, byrow=2) #Worked this out on paper
#BASS
X <- matrix(runif(1500), ncol=3)
X <- rbind(X, rep(0, 3))
X <- rbind(X, rep(1, 3))
Yf <- apply(X, 1, f)
Yg <- apply(X, 1, g)
mod1  <- BASS::bass(X, Yf)
mod2 <- BASS::bass(X, Yg)
C1_list <- Cfg_bass(mod1, mod2, mcmc.use=seq(1, 1000, by=10))
C1 <- matrix(0, nrow=3, ncol=3)
for(i in 1:100){
C1 <- C1 + C1_list[[i]]/100
}
C1
round(C1, 3)
Ctrue
mod1
mod1$xx.des
dim(mod1$xx.des)
mod1$xx.des== mod2$xx.des
min(mod1$xx.des== mod2$xx.des)
max(abs(mod1$xx.des - mod2$xx.des))
document()
library(devtools)
document()
library(concordance)
document()
f <- function(x){
x[1]^2 + x[1]*x[2] + x[2]^3/9
}
# Sim Study Parameters
N <- 1000
p <- 3
# Prior
mu <- rep(0.5, 3)
Sigma <- matrix(c(1, 0.5, -0.2,
0.5, 1, 0.1,
-0.2, 0.1, 1),
ncol=3, byrow=TRUE)/3
# MC Estimate
measure <- function() as.numeric(mvtnorm::rmvnorm(1, mu, Sigma))
Cmc4 <- C_mc(f, measure, nmc=5e4)
# BASS Estimate
pr <- list()
for(i in 1:3) pr[[i]] <- list(dist="normal", trunc=c(-Inf, Inf), mean=0, sd=1, weights=1)
X <- lhs::randomLHS(N, p)*4.5 - 2
y <- apply(X, 1, f)
Esig <- eigen(Sigma)
A <- Esig$vectors%*%diag(1/sqrt(Esig$values))%*%t(Esig$vectors)
X0 <- X - rep(mu, each=N)
Z <- X0%*%A
mod4 <- BASS::bass(Z, y, nmcmc=25000, nburn=20000, thin=5)
Cba4z <- C_bass(mod4, pr)
Cba4 <- t(A)%*%Cba4z%*%A
Cmc4
Cba4
d1 <- max(abs(Cba4-Cmc4))/max(Cba4)
d1
document()
library(concordance)
?ks.test
k.test
ks.test
x1 <- rnorm(500, 0, 1.1)
x2 <- rnorm(10000, 0, 1)
range(x1)
range(x2)
x1 <- rnorm(500, 0, 1.2)
range(x1)
range(x2)
quack::kld
?quack::kld
quack:::compute_kld
?quack::crps
?ecdf
?ks.test
x <- matrix(rnorm(200, 0, 1), ncol=2)
y <- matrix(rt(200, 8), ncol=2)
y <- matrix(rt(220, 8), ncol=2)
nx <- nrow(x)
ny <- nrow(y)
p <- ncol(x)
if(p != ncol(y)){
stop("x and y must be matrices with same number of columns.")
}
bounds <- array(NA, dim=rep(2, p))
bunds
bounds
bounds <- matrix(NA, nrow=2, ncol=p)
bounds
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
bounds
x[,1]
y[,1]
range(c(x[,i], y[,i]))
i
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rt(220, 8), ncol=2)
y <- matrix(rt(220, 8), ncol=2)i=1
i=1
range(c(x[,i], y[,i]))
bounds <- matrix(NA, nrow=2, ncol=p)
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
bounds
ii = 1
z <- bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1])
n_pts = 100
z <- bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1])
z
ii = n_pts
bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1])
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,2]))
z
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
jj = 1
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
z
plot(NULL, xlim=bounds[,1], ylim=bounds[,2])
n_pts = 10
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
points(z, pch=16)
Sys.sleep(0.5)
}
}
z
plot(NULL, xlim=bounds[,1], ylim=bounds[,2])
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
points(z[1], z[2], pch=16)
Sys.sleep(0.5)
}
}
(x[,1] <= z[1])
(x[,1] <= z[1]) & (x[,2] <= z[2])
ii
jj
sum((x[,1] <= z[1]) & (x[,2] <= z[2]))
sum((x[,1] <= z[1]))
jj = 5
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
sum((x[,1] <= z[1]))
sum((x[,1] <= z[1]))
jj
n_pts
jj = 3
jj = 6
z
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
x[,2]
z[2]
sum((x[,1] <= z[1]) & (x[,2] <= z[2]))
sum((x[,1] <= z[1]))
bvks <- function(x, y, n_pts=100){
nx <- nrow(x)
ny <- nrow(y)
p <- ncol(x)
if(p != ncol(y)){
stop("x and y must be matrices with same number of columns.")
}
if(p != 2){
stop('x and ')
}
bounds <- matrix(NA, nrow=2, ncol=p)
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
ks <- Inf
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
Fx <- sum((x[,1] <= z[1]) & (x[,2] <= z[2]))/n_pts
Fy <- sum((y[,1] <= z[1]) & (y[,2] <= z[2]))/n_pts
curr <- abs(Fx-Fy)
if(curr < ks) ks <- curr
}
}
return(ks)
}
bvks(x, y)
ks <- bvks(x, y)
bvks <- function(x, y, n_pts=100){
nx <- nrow(x)
ny <- nrow(y)
p <- ncol(x)
if(p != ncol(y)){
stop("x and y must be matrices with same number of columns.")
}
if(p != 2){
stop('x and ')
}
bounds <- matrix(NA, nrow=2, ncol=p)
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
ks <- -Inf
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
Fx <- sum((x[,1] <= z[1]) & (x[,2] <= z[2]))/n_pts
Fy <- sum((y[,1] <= z[1]) & (y[,2] <= z[2]))/n_pts
curr <- abs(Fx-Fy)
if(curr > ks) ks <- curr
}
}
return(ks)
}
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rt(220, 8), ncol=2)
ks <- bvks(x, y)
ks
ks <- bvks(x, y, n_pts=200)
ks
ks <- bvks(x, y, n_pts=200)
ks
ks <- bvks(x, y, n_pts=260)
ks
bvks(x, y, n_pts=260)
n_vec <- c(50, 100, 200, 400, 800)
ks_vec <- rep(NA, length(n_vec))
n_vec <- c(50, 100, 200, 400, 800)
ks_vec <- rep(NA, length(n_vec))
for(i in 1:5){
print(i)
ks_vec[i] <- bvks(x, y, n_pts=n_vec[i])
}
plot(n_vec, ks_vec, type='o', pch=16)
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rgamma(220, 5, 2) - 2.5, ncol=2)
hist(x, breaks=30)
hist(y, breaks=30, add=TRUE, col=adjustcolor("blue", alpha.f=0.2))
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rgamma(220, 5, 2) - 2.5, ncol=2)
bvks(x, y, n_pts=260)
n_vec <- c(50, 100, 200, 400, 800)
ks_vec <- rep(NA, length(n_vec))
for(i in 1:5){
print(i)
ks_vec[i] <- bvks(x, y, n_pts=n_vec[i])
}
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rgamma(220, 5, 2) - 2.5, ncol=2)
ks <- bvks(x, y, n_pts=260)
n_vec <- c(50, 100, 200, 400, 800)
ks_vec <- rep(NA, length(n_vec))
for(i in 1:5){
print(i)
ks_vec[i] <- bvks(x, y, n_pts=n_vec[i])
}
plot(n_vec, ks_vec, type='o', pch=16)
bvks
bvks <- function(x, y, n_pts=100){
nx <- nrow(x)
ny <- nrow(y)
p <- ncol(x)
if(p != ncol(y)){
stop("x and y must be matrices with same number of columns.")
}
if(p != 2){
stop('x and ')
}
bounds <- matrix(NA, nrow=2, ncol=p)
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
ks <- -Inf
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
Fx <- sum((x[,1] <= z[1]) & (x[,2] <= z[2]))/nx
Fy <- sum((y[,1] <= z[1]) & (y[,2] <= z[2]))/ny
curr <- abs(Fx-Fy)
if(curr > ks) ks <- curr
}
}
return(ks)
}
bcks
bvks
x <- matrix(rnorm(200), ncol=2)
bvks <- function(x, y, n_pts=100){
nx <- nrow(x)
ny <- nrow(y)
p <- ncol(x)
if(p != ncol(y)){
stop("x and y must be matrices with same number of columns.")
}
if(p != 2){
stop('x and ')
}
bounds <- matrix(NA, nrow=2, ncol=p)
for(i in 1:p){
bounds[,i] <- range(c(x[,i], y[,i]))
}
ks <- -Inf
for(ii in 1:n_pts){
for(jj in 1:n_pts){
z <- c(bounds[1,1] + ((ii - 1) / (n_pts - 1)) * diff(bounds[,1]),
bounds[1,2] + ((jj - 1) / (n_pts - 1)) * diff(bounds[,2]))
Fx <- sum((x[,1] <= z[1]) & (x[,2] <= z[2]))/nx
Fy <- sum((y[,1] <= z[1]) & (y[,2] <= z[2]))/ny
curr <- abs(Fx-Fy)
if(curr > ks) ks <- curr
}
}
return(ks)
}
x <- matrix(rnorm(200), ncol=2)
y <- matrix(rgamma(220, 5, 2) - 2.5, ncol=2)
ks <- bvks(x, y, n_pts=260)
n_vec <- c(50, 100, 200, 400, 800)
ks_vec <- rep(NA, length(n_vec))
for(i in 1:5){
print(i)
ks_vec[i] <- bvks(x, y, n_pts=n_vec[i])
}
plot(n_vec, ks_vec, type='o', pch=16)
ks <- bvks(x, y, n_pts=100)
ks
