D2 <- D2a + D2b + D2c
sigma1_hat <- sqrt(max(1e-9, D2 - 4*beta_hat*sigma2_hat*mu2_hat*D3))
rho_hat <- D3/sigma1_hat
rho_hat <- min(rho_hat, 1 - 1e-9)
rho_hat <- max(rho_hat, 1e-9 - 1)
# Apply shrinkage
rho_hat <- rho_hat/(1 + penalty[2])
out <- list(mu=c(mu1_hat, mu2_hat),
sigma=c(sigma1_hat, sigma2_hat),
rho=rho_hat,
beta=beta_hat)
return(out)
}
dbanana <- function(x, mu, sigma, rho, beta, log=FALSE){
if(rho < -1 | rho > 1){
return(-Inf)
}
xi1 = x[,1] + beta*x[,2]^2 #- 100*beta
xi2 = x[,2]
sigma12 = rho*sigma[1]*sigma[2]
Sigma = matrix(c(sigma[1]^2, sigma12, sigma12, sigma[2]^2), byrow=TRUE, nrow=2)
sum(mvnfast::dmvn(cbind(xi1, xi2), mu, Sigma, log=log))
}
rbanana <- function(n, mu, sigma, rho, beta){
# Sample xi from bivariate normal
xi <- mvnfast::rmvn(n, mu=mu, sigma=matrix(c(sigma[1]^2, rho*sigma[1]*sigma[2],
rho*sigma[1]*sigma[2], sigma[2]^2),
nrow=2, byrow=TRUE))
# Apply inverse transformation to get x
x2 <- xi[,2]
x1 <- xi[,1] - beta * x2^2 #+ 100 * beta # non-identifiability between mu_1 and beta since beta gives a shift in mu_1
# Combine into a matrix
x <- cbind(x1, x2)
# If x1 and x2 are required to be within [-1,1], apply rejection sampling
# Otherwise, return all samples
# Here, we'll assume no constraints as per the density definition
return(x)
}
rcrescent <- function(n, mu=c(0.5, 0.5), sigma=c(.1,.1), R=2, L=0.5) {
# Center of the circle
c1 <- mu[1] - R
c2 <- mu[2]
# Angular span of the arc
theta <- L / R
# Sample angle uniformly from [-theta/2, theta/2]
#phi <- runif(1, -theta / 2, theta / 2)
phi <- rnorm(n, 0, theta / 2)
# Compute coordinates of the sampled point on the arc
x <-  rnorm(n, c1 + R * cos(phi), sigma[1])
y <-  rnorm(n, c2 + R * sin(phi), sigma[2])
# xy = mvnfast::rmvn(n, c(c1 + R * cos(phi), c2 + R * sin(phi)), diag(sigma^2))
return(cbind(x,y))
}
# penalty shrinks beta and rho towards zero
banana_MOM <- function(x, penalty=c(0.1, 0.1)){
# Estimate beta
x1 <- x[,1]
x2_sq <- x[,2]^2
beta_hat <- -lm(x1~x2_sq)$coefficients[2]
# Apply shrinkage
beta_hat <- beta_hat/(1 + penalty[1])
# Estimate mu2 and sigma2
x2 <- x[,2]
mu2_hat <- mean(x2)
sigma2_hat <- sd(x2)
# Estimate mu1
mu1_hat <- mean(x1) + beta_hat*(mu2_hat^2 + sigma2_hat^2)
# Estimate sigma1 and rho
m11 <- mean(x1*x2)
D3a <- m11 - mu1_hat*mu2_hat
D3b <- beta_hat*(mu2_hat^3 + 3*mu2_hat*sigma2_hat^2)
D3 <- (D3a + D3b)/sigma2_hat
m20 <- mean(x1^2)
D2a <- m20 - mu1_hat^2
D2b <- 2*beta_hat*mu1_hat*(mu2_hat^2 + sigma2_hat^2)
D2c <- -beta_hat^2*(mu2_hat^4 + 6*mu2_hat^2*sigma2_hat^2 + 3*sigma2_hat^4)
D2 <- D2a + D2b + D2c
sigma1_hat <- sqrt(max(1e-9, D2 - 4*beta_hat*sigma2_hat*mu2_hat*D3))
rho_hat <- D3/sigma1_hat
rho_hat <- min(rho_hat, 1 - 1e-9)
rho_hat <- max(rho_hat, 1e-9 - 1)
# Apply shrinkage
rho_hat <- rho_hat/(1 + penalty[2])
out <- list(mu=c(mu1_hat, mu2_hat),
sigma=c(sigma1_hat, sigma2_hat),
rho=rho_hat,
beta=beta_hat)
return(out)
}
# Define true values
n <- 1000
mu <- c(1, 0.1)
sigma <- c(1, 1)
rho = 0.2
beta <- 10
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0,0.))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0.01,0.01))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0.01,0.1))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0,0))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
dbanana <- function(x, mu, sigma, rho, beta, log=FALSE){
if(rho < -1 | rho > 1){
return(-Inf)
}
xi1 = x[,1] + beta*x[,2]^2 #- 100*beta
xi2 = x[,2]
sigma12 = rho*sigma[1]*sigma[2]
Sigma = matrix(c(sigma[1]^2, sigma12, sigma12, sigma[2]^2), byrow=TRUE, nrow=2)
sum(mvnfast::dmvn(cbind(xi1, xi2), mu, Sigma, log=log))
}
rbanana <- function(n, mu, sigma, rho, beta){
# Sample xi from bivariate normal
xi <- mvnfast::rmvn(n, mu=mu, sigma=matrix(c(sigma[1]^2, rho*sigma[1]*sigma[2],
rho*sigma[1]*sigma[2], sigma[2]^2),
nrow=2, byrow=TRUE))
# Apply inverse transformation to get x
x2 <- xi[,2]
x1 <- xi[,1] - beta * x2^2 #+ 100 * beta # non-identifiability between mu_1 and beta since beta gives a shift in mu_1
# Combine into a matrix
x <- cbind(x1, x2)
# If x1 and x2 are required to be within [-1,1], apply rejection sampling
# Otherwise, return all samples
# Here, we'll assume no constraints as per the density definition
return(x)
}
rcrescent <- function(n, mu=c(0.5, 0.5), sigma=c(.1,.1), R=2, L=0.5) {
# Center of the circle
c1 <- mu[1] - R
c2 <- mu[2]
# Angular span of the arc
theta <- L / R
# Sample angle uniformly from [-theta/2, theta/2]
#phi <- runif(1, -theta / 2, theta / 2)
phi <- rnorm(n, 0, theta / 2)
# Compute coordinates of the sampled point on the arc
x <-  rnorm(n, c1 + R * cos(phi), sigma[1])
y <-  rnorm(n, c2 + R * sin(phi), sigma[2])
# xy = mvnfast::rmvn(n, c(c1 + R * cos(phi), c2 + R * sin(phi)), diag(sigma^2))
return(cbind(x,y))
}
# penalty shrinks beta and rho towards zero
banana_MOM <- function(x, penalty=c(0.1, 0.1)){
# Estimate beta
x1 <- x[,1]
x2_sq <- x[,2]^2
beta_hat <- -lm(x1~x2_sq)$coefficients[2]
# Apply shrinkage
beta_hat <- beta_hat/(1 + penalty[1])
# Estimate mu2 and sigma2
x2 <- x[,2]
mu2_hat <- mean(x2)
sigma2_hat <- sd(x2)
# Estimate mu1
mu1_hat <- mean(x1) + beta_hat*(mu2_hat^2 + sigma2_hat^2)
# Estimate sigma1 and rho
m11 <- mean(x1*x2)
D3a <- m11 - mu1_hat*mu2_hat
D3b <- beta_hat*(mu2_hat^3 + 3*mu2_hat*sigma2_hat^2)
D3 <- (D3a + D3b)/sigma2_hat
m20 <- mean(x1^2)
D2a <- m20 - mu1_hat^2
D2b <- 2*beta_hat*mu1_hat*(mu2_hat^2 + sigma2_hat^2)
D2c <- -beta_hat^2*(mu2_hat^4 + 6*mu2_hat^2*sigma2_hat^2 + 3*sigma2_hat^4)
D2 <- D2a + D2b + D2c
sigma1_hat <- sqrt(max(1e-9, D2 + 4*beta_hat*sigma2_hat*mu2_hat*D3))
rho_hat <- D3/sigma1_hat
rho_hat <- min(rho_hat, 1 - 1e-9)
rho_hat <- max(rho_hat, 1e-9 - 1)
# Apply shrinkage
rho_hat <- rho_hat/(1 + penalty[2])
out <- list(mu=c(mu1_hat, mu2_hat),
sigma=c(sigma1_hat, sigma2_hat),
rho=rho_hat,
beta=beta_hat)
return(out)
}
# Define true values
n <- 1000
mu <- c(1, 0.1)
sigma <- c(1, 1)
rho = 0.2
beta <- 10
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0,0))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
beta_hat
# penalty shrinks beta and rho towards zero
banana_MOM <- function(x, penalty=c(0.1, 0.1)){
# Estimate beta
x1 <- x[,1]
x2_sq <- x[,2]^2
beta_hat <- -lm(x1~x2_sq)$coefficients[2]
# Apply shrinkage
beta_hat <- beta_hat/(1 + penalty[1])
# Estimate mu2 and sigma2
x2 <- x[,2]
mu2_hat <- mean(x2)
sigma2_hat <- sd(x2)
# Estimate mu1
mu1_hat <- mean(x1) + beta_hat*(mu2_hat^2 + sigma2_hat^2)
# Estimate sigma1 and rho
m11 <- mean(x1*x2)
D3a <- m11 - mu1_hat*mu2_hat
D3b <- beta_hat*(mu2_hat^3 + 3*mu2_hat*sigma2_hat^2)
D3 <- (D3a + D3b)/sigma2_hat
m20 <- mean(x1^2)
D2a <- m20 - mu1_hat^2
D2b <- 2*beta_hat*mu1_hat*(mu2_hat^2 + sigma2_hat^2)
D2c <- -beta_hat^2*(mu2_hat^4 + 6*mu2_hat^2*sigma2_hat^2 + 3*sigma2_hat^4)
D2 <- D2a + D2b + D2c
sigma1_hat <- sqrt(max(1e-9, D2 + 4*beta_hat*sigma2_hat*mu2_hat*D3))
rho_hat <- D3/sigma1_hat
rho_hat <- min(rho_hat, 1 - 1e-9)
rho_hat <- max(rho_hat, 1e-9 - 1)
# Apply shrinkage
rho_hat <- rho_hat/(1 + penalty[2])
out <- list(mu=c(mu1_hat, mu2_hat),
sigma=c(sigma1_hat, sigma2_hat),
rho=rho_hat,
beta=beta_hat)
return(out)
}
# Define true values
n <- 1000
mu <- c(1, 0.1)
sigma <- c(1, 1)
rho = 0.2
beta <- 10
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0,0))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
# penalty shrinks beta and rho towards zero
banana_MOM <- function(x, penalty=c(0.1, 0.1)){
# Estimate beta
x1 <- x[,1]
x2_sq <- x[,2]^2
beta_hat <- -lm(x1~x2_sq)$coefficients[2]
# Apply shrinkage
beta_hat <- beta_hat/(1 + penalty[1])
# Estimate mu2 and sigma2
x2 <- x[,2]
mu2_hat <- mean(x2)
sigma2_hat <- sd(x2)
# Estimate mu1
mu1_hat <- mean(x1) + beta_hat*(mu2_hat^2 + sigma2_hat^2)
# Estimate sigma1 and rho
m11 <- mean(x1*x2)
D3a <- m11 - mu1_hat*mu2_hat
D3b <- beta_hat*(mu2_hat^3 + 3*mu2_hat*sigma2_hat^2)
D3 <- (D3a + D3b)/sigma2_hat
m20 <- mean(x1^2)
D2a <- m20 - mu1_hat^2
D2b <- 2*beta_hat*mu1_hat*(mu2_hat^2 + sigma2_hat^2)
D2c <- -beta_hat^2*(mu2_hat^4 + 6*mu2_hat^2*sigma2_hat^2 + 3*sigma2_hat^4)
D2 <- D2a + D2b + D2c
sigma1_hat <- sqrt(max(1e-12, D2 + 4*beta_hat*sigma2_hat*mu2_hat*D3))
rho_hat <- D3/sigma1_hat
rho_hat <- min(rho_hat, 1 - 1e-12)
rho_hat <- max(rho_hat, 1e-12 - 1)
# Apply shrinkage
rho_hat <- rho_hat/(1 + penalty[2])
out <- list(mu=c(mu1_hat, mu2_hat),
sigma=c(sigma1_hat, sigma2_hat),
rho=rho_hat,
beta=beta_hat)
return(out)
}
# Define true values
n <- 1000
mu <- c(1, 0.1)
sigma <- c(1, 1)
rho = 0.2
beta <- 10
# Initialize storage vectors
M <- 1000
mu1_hat <- mu2_hat <- sig1_hat <- sig2_hat <- rho_hat <- beta_hat <- rep(NA, M)
for(i in 1:M){
x <- rbanana(n, mu, sigma, rho, beta)
pars <- banana_MOM(x, penalty=c(0,0))
mu1_hat[i] <- pars$mu[1]
mu2_hat[i] <- pars$mu[2]
sigma1_hat[i] <- pars$sigma[1]
sigma2_hat[i] <- pars$sigma[2]
rho_hat[i] <- pars$rho
beta_hat[i] <- pars$beta
}
par(mfrow=c(2,3))
hist(mu1_hat, breaks=30)
abline(v=mu[1], col='orange', lwd=2)
hist(mu2_hat, breaks=30)
abline(v=mu[2], col='orange', lwd=2)
hist(sigma1_hat, breaks=30)
abline(v=sigma[1], col='orange', lwd=2)
hist(sigma2_hat, breaks=30)
abline(v=sigma[2], col='orange', lwd=2)
hist(rho_hat, breaks=30)
abline(v=rho, col='orange', lwd=2)
hist(beta_hat, breaks=30)
abline(v=beta, col='orange', lwd=2)
hist(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15))
hist(rbanana(1000, c(3,0.5), c(0.5, 0.5), 0, 15))
plot(rbanana(1000, c(3,0.5), c(0.5, 0.5), 0, 15))
par(mfrow=c(1,2))
plot(rbanana(1000, c(1,0.5), c(0.5, 0.5), 0, 15))
plot(rbanana(1000, c(1,0.5), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(1,0.5), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(1, 1), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(3,2), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(3,1), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(0.5, 0.5), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(1, 1), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(1, 1), 0.5, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(1, 1), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(0,0), c(1, 1), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
plot(rbanana(1000, c(3,2), c(1, 1), 0, 15), xlim=c(-100, 20), ylim=c(-5, 5))
duqling::dms_additive
?C_bass
library(concordance)
?C_bass
?bass
library(BASS)
?bass
?C_bass
library(concordance)
?C_bass
prior <- list()
prior$trunc <- c(0, 1)
tau0  <- prior$trunc[1,drop=FALSE][ell]
ell=1
tau0  <- prior$trunc[1,drop=FALSE][ell]
tau1  <- prior$trunc[2,drop=FALSE][ell]
tau0
tau1
library(concordance)
library(BASS)
library(activegp)
# A simple function of two variables
f <- function(x){
x[1]^2 + x[1]*x[2] + x[2]^3/9
}
# Sim Study Parameters
N <- 100
p_vec <- c(2, 3, 4, 5, 10, 20, 50, 100)
pp <- max(p_vec)
pp
X <- maximinLHS(N-2, pp)
library(lhs)
X <- maximinLHS(N-2, pp)
X <- rbind(X, rep(0, pp))
X <- rbind(X, rep(1, pp))
Yf <- apply(X, 1, f)
mod_bass <- bass(X[,1:p], Yf, verbose=FALSE, temp.ladder=1.1^(0:5))
p = 5
mod_bass <- bass(X[,1:p], Yf, verbose=FALSE, temp.ladder=1.1^(0:5))
foo = C_bass(mod_bass)
foo
foo = C_bass(mod_bass, mcmc.use=1:1000)
foo
length(foo)
foo[[1]]
bass(X, y)
bass(X, Yf)
