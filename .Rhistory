return(res)
}
# Define true values
Cf_true <- function(t){
res <- matrix(c(32,11,11,4)/12,
nrow=2, byrow=TRUE)
return(res)
}
Cg_true <- function(t){
u <- 2*t-1
a <- t^4*(1-t)^2/12
B <- matrix(c(32, 11+210*u, 11+210*u, 4 + 120*u + 2160*u^2),
nrow=2, byrow=TRUE)
return(a*B)
}
Cfg_true <- function(t){
u <- 2*t-1
a <- t^2*(1-t)/12
B <- matrix(c(32, 11+210*u, 11, 4 + 60*u), nrow=2, byrow=TRUE)
return(a*B)
}
conc_true <- function(t){
u <- 2*t-1
(3+5*u)/sqrt(9+30*u + 540*u^2)
}
Kf_true <- function(){
res <- matrix(c(32, 11, 11, 4), nrow=2, byrow=TRUE)/12
return(res)
}
Kg_true <- function(){
res <- matrix(c(64, 127, 127, 788), nrow=2, byrow=TRUE)/2520
return(res)
}
Kfg_true <- function(){
res <- matrix(c(32, 53, 11, 16), nrow=2, byrow=TRUE)/144
return(res)
}
# Generate training data
p <- 2
n <- 800
nT <- 25
tt <- seq(0, 1, length=nT+2)[-c(1, nT+2)]
X <- lhs::randomLHS(n, p)
y1 <- apply(X, 1, f, nT=nT)
y2 <- apply(X, 1, g, nT=nT)
# Fit BASS models
np1 <- BASS:::bassPCAsetup(X, y1)$n.pc
fit1 <- bassPCA(X, y1, n.pc=np1, n.cores=min(np1, 3))
np2 <- BASS:::bassPCAsetup(X, y2)$n.pc
fit2 <- bassPCA(X, y2, n.pc=np2, n.cores=min(np2, 3))
# Estimate C models
tic()
C1 <- C_bassPCA(fit1)
toc()
tic()
C2 <- C_bassPCA(fit2)
toc()
tic()
C12 <- Cfg_bassPCA(fit1, fit2)
toc()
cat("Alternate version")
tic()
C1_alt <- C_bassPCA_v2(fit1)
toc()
tic()
C2_alt <- C_bassPCA_v2(fit2)
toc()
tic()
C12_alt <- Cfg_bassPCA_v2(fit1, fit2)
toc()
# Calculate concordance
tr1 <- unlist(lapply(C1_alt, function(A) sum(diag(A))))
tr2 <- unlist(lapply(C2_alt, function(A) sum(diag(A))))
tr12 <- unlist(lapply(C12_alt, function(A) sum(diag(A))))
conc_est <- tr12/sqrt(tr1*tr2)
curve(conc_true(x), lwd=2)
points(tt, conc_est, pch=16, col='dodgerblue')
# Check errors
for(t in 1:nT){
print(sum(abs(Cf_true(tt[t]) - C1[[t]]))/sum(abs(Cf_true(tt[t]))))
print(sum(abs(Cg_true(tt[t]) - C2[[t]]))/sum(abs(Cg_true(tt[t]))))
print(sum(abs(Cfg_true(tt[t]) - C12[[t]]))/sum(abs(Cfg_true(tt[t]))))
}
# Get K matrices
Kf <- Kg <- Kfg <- matrix(0, nrow=2, ncol=2)
for(t in 1:nT){
Kf <- Kf + C1[[t]]/nT
Kg <- Kg + C2[[t]]/nT
Kfg <- Kfg + C12[[t]]/nT
}
print(sum(abs(Kf - Kf_true())))
print(sum(abs(Kg - Kg_true())))
print(sum(abs(Kfg - Kfg_true())))
# Try augmented case
y1n <- t(apply(y1, 1, function(row) row + rnorm(length(row), mean = 0, sd = 0.01 * sd(row))))
y2n <- t(apply(y2, 1, function(row) row + rnorm(length(row), mean = 0, sd = 0.01 * sd(row))))
fit1_aug <- bass(X, y1n, xx.func=tt)
fit2_aug <- bass(X, y2n, xx.func=tt)
fit1_aug_mod <- bassfunc2bass(fit1_aug)
fit2_aug_mod <- bassfunc2bass(fit2_aug)
conc_aug <- conc_bass(fit1_aug_mod, fit2_aug_mod)
C1_aug <- C_bass(fit1_aug_mod, prior=pr)
C2_aug <- C_bass(fit2_aug_mod, prior=pr)
C12_aug <- Cfg_bass(fit1_aug_mod, fit2_aug_mod, prior=pr)
tr(C12_aug)/sqrt(tr(C1_aug)*tr(C2_aug))
cat("Alternate version")
tic()
C1_alt <- C_bassPCA_v2(fit1, prior=pr)
toc()
tic()
C2_alt <- C_bassPCA_v2(fit2, prior=pr)
toc()
tic()
C12_alt <- Cfg_bassPCA_v2(fit1, fit2, prior=pr)
toc()
# Calculate concordance
tr1 <- unlist(lapply(C1_alt, function(A) sum(diag(A))))
tr2 <- unlist(lapply(C2_alt, function(A) sum(diag(A))))
tr12 <- unlist(lapply(C12_alt, function(A) sum(diag(A))))
conc_est <- tr12/sqrt(tr1*tr2)
curve(conc_true(x), lwd=2)
points(tt, conc_est, pch=16, col='dodgerblue')
# Check errors
for(t in 1:nT){
print(sum(abs(Cf_true(tt[t]) - C1_alt[[t]]))/sum(abs(Cf_true(tt[t]))))
print(sum(abs(Cg_true(tt[t]) - C2_alt[[t]]))/sum(abs(Cg_true(tt[t]))))
print(sum(abs(Cfg_true(tt[t]) - C12_alt[[t]]))/sum(abs(Cfg_true(tt[t]))))
}
devtools::document()
mean(runif(1000000)^3)
1/3+1/4
(1/3+1/4)*(1/3 - 1/4)
mean(runif(1000000)^4)
(1/3+1/4)*(1/3 - 1/4) + 5*(1/4-1/5) - 10/4*(1/3-1/4)
zeb <- runif(100000)
curve(a*x^(a-1) - (a+b)*x^(a+b-1))
a = 7
b = 3
curve(a*x^(a-1) - (a+b)*x^(a+b-1))
tr(Kfg)/sqrt(tr(Kf)*tr(Kg))
Kfg_true()
tr(Kfg_true())/sqrt(tr(Kf_true())*tr(Kg_true()))
curve(conc_true(x))
par(mfrow=c(1,1))
curve(conc_true(x))
curve(conc_true(x), lwd=2, lty=3)
integrate(conc_true, lower=0, upper=1)
library(RColorBrewer)
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=15:17)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=15:17, col=brewer.pal(5, "Set2"))
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=15:17, cex=1.4, col=brewer.pal(5, "Set2"))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=15:17, cex=1.4, col=brewer.pal(5, "Set2"))
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=1:3, cex=1.4, col=brewer.pal(5, "Set2"))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=1:3, cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,4), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
legend('topleft', c("Concordance(t)", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,1,1,1), lwd=2, col=c("black", brewer.pal(5, "Set2")), pch=c(-1,1,2,5))
library(RColorBrewer)
png("figs/simple_poly_conc.png", width=8, height=5, units="in", res=300)
par(mfrow=c(1,1))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
legend('topleft', c("Concordance(t)", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,1,1,1), lwd=2, col=c("black", brewer.pal(5, "Set2")), pch=c(-1,1,2,5))
dev.off()
tt
points(tt, conc_est)
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=2, col=c("black", brewer.pal(5, "Set2")), pch=c(-1,3,1,2,5))
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=2, col=c("black","black", brewer.pal(5, "Set2")), pch=c(-1,3,1,2,5))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3)
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=2, col=c("black","black", brewer.pal(5, "Set2")), pch=c(-1,3,1,2,5))
points(tt, conc_est, pch=3, lwd=2)
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,2,2,2), col=c("black","black", brewer.pal(5, "Set2")), pch=c(-1,3,1,2,5))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1)
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1, col=brewer.pal(5, "Set2")[4])
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,2,2,2), col=c("black", brewer.pal(5, "Set2")[c(4,1:3)]), pch=c(-1,3,1,2,5))
library(RColorBrewer)
png("figs/simple_poly_conc.png", width=8, height=5, units="in", res=300)
par(mfrow=c(1,1))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1, col=brewer.pal(5, "Set2")[4])
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,2,2,2), col=c("black", brewer.pal(5, "Set2")[c(4,1:3)]), pch=c(-1,3,1,2,5))
dev.off()
library(RColorBrewer)
png("figs/simple_poly_conc.png", width=8, height=5, units="in", res=300)
par(mfrow=c(1,1))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
#abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=2)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1, col=brewer.pal(5, "Set2")[4])
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,2,2,2), col=c("black", brewer.pal(5, "Set2")[c(4,1:3)]), pch=c(-1,3,1,2,5))
dev.off()
library(RColorBrewer)
png("figs/simple_poly_conc.png", width=8, height=5, units="in", res=300)
par(mfrow=c(1,1))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=1)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1, col=brewer.pal(5, "Set2")[4])
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,2,2,2), col=c("black", brewer.pal(5, "Set2")[c(4,1:3)]), pch=c(-1,3,1,2,5))
dev.off()
library(RColorBrewer)
png("figs/simple_poly_conc.png", width=8, height=5, units="in", res=300)
par(mfrow=c(1,1))
curve(conc_true(x), lwd=2, lty=3, xlab="t", ylab="Concordance")
abline(h=c(0.1459, 0.331, 0.347), col=brewer.pal(5, "Set2"), lwd=1)
points(c(0,0,0), c(0.1459, 0.331, 0.347), pch=c(1,2,5), cex=1.4, lwd=2, col=brewer.pal(5, "Set2"))
points(tt, conc_est, pch=3, lwd=1, col=brewer.pal(5, "Set2")[4])
legend('topleft', c("Concordance(t)", "Estimated values", "Augmentation", "Direct aggregation", "JIT aggregation"),
lty=c(3,-1,1,1,1), lwd=c(2,1,1,1,1), col=c("black", brewer.pal(5, "Set2")[c(4,1:3)]), pch=c(-1,3,1,2,5))
dev.off()
Kfg_true()
conc_dir_true <- tr(Kfg_true())/sqrt(tr(Kf_true())*tr(Kg_true()))
library(concordance)
conc_dir_true <- tr(Kfg_true())/sqrt(tr(Kf_true())*tr(Kg_true()))
conc_dir_true
conc_jit_true <- integrate(conc_true, lower=0, upper=1)
conc_jit_true$value
?bassPCAsetup
library(BASS)
?bassPCAsetup
?BASS:::bassPCAsetup
?BASS::bassPCAsetup
bassPCAsetup
BASS:::bassPCAsetup
np1
seq(1, 1000, length.out=10)
np1=3
library(concordance)
library(BASS)
library(lhs)
# Define functions
f <- function(x, nT=30){
res <- (x[1]^2 + x[1]*x[2])*rep(1, nT)
return(res)
}
g <- function(x, nT=30){
tt <- seq(0, 1, length=nT+2)[-c(1, nT+2)]
res <- (x[1]^2 + x[1]*x[2] + 10*(2*tt-1)*x[2]^3)*tt^2*(1-tt)
return(res)
}
# Define true values
Cf_true <- function(t){
res <- matrix(c(32,11,11,4)/12,
nrow=2, byrow=TRUE)
return(res)
}
Cg_true <- function(t){
u <- 2*t-1
a <- t^4*(1-t)^2/12
B <- matrix(c(32, 11+210*u, 11+210*u, 4 + 120*u + 2160*u^2),
nrow=2, byrow=TRUE)
return(a*B)
}
Cfg_true <- function(t){
u <- 2*t-1
a <- t^2*(1-t)/12
B <- matrix(c(32, 11+210*u, 11, 4 + 60*u), nrow=2, byrow=TRUE)
return(a*B)
}
conc_true <- function(t){
u <- 2*t-1
(3+5*u)/sqrt(9+30*u + 540*u^2)
}
Kf_true <- function(){
res <- matrix(c(32, 11, 11, 4), nrow=2, byrow=TRUE)/12
return(res)
}
Kg_true <- function(){
res <- matrix(c(64, 127, 127, 788), nrow=2, byrow=TRUE)/2520
return(res)
}
Kfg_true <- function(){
res <- matrix(c(32, 53, 11, 16), nrow=2, byrow=TRUE)/144
return(res)
}
conc_dir_true <- tr(Kfg_true())/sqrt(tr(Kf_true())*tr(Kg_true()))
conc_jit_true <- integrate(conc_true, lower=0, upper=1)$value
# Generate training data
p <- 2
n <- 800
nT <- 25
tt <- seq(0, 1, length=nT+2)[-c(1, nT+2)]
X <- lhs::randomLHS(n, p)
y1 <- apply(X, 1, f, nT=nT)
y2 <- apply(X, 1, g, nT=nT)
np1
fit1 <- bassPCA(X, y1, n.pc=np1, n.cores=min(np1, 3))
library(concordance)
library(BASS)
library(lhs)
f1 <- function(x, tt){
res <- rep(x[1]^2 + x[1]*x[2], length(tt))
}
f2 <- function(x, tt, a=-10, b=10){
x[1]^2 + x[1]*x[2] + (tt*(b-a) + a)*x[2]^3
}
grlee1 <- function(x, scale01=FALSE){
if(scale01){
x <- 0.5 + 2*x
}
term1 <- sin(10*pi*x) / (2*x)
term2 <- (x-1)^4
y <- term1 + term2
return(y)
}
f3 <- function(x, tt, a, b, phi){
#f1(x, tt)*(1+plogis(tt, 0.5, 0.05))
f2(x, tt, a ,b)*phi(tt)
}
phi1 <- function(tt) 1
phi2 <- function(tt) dnorm(tt, 0.5, 1/8)^2 + 0.1
n <- 300
p <- 2
X <- lhs::maximinLHS(n, p)
nfunc <- 20
tt <- seq(0, 1, length.out=nfunc)
y1 <- apply(X, 1, f1, tt=tt) + rnorm(n, 0, 0.001)
y2 <- apply(X, 1, f3, tt=tt, a=-10, b=10, phi1) + rnorm(n, 0, 0.001)
# Augmentation
fit1 <- bass(X, y1, xx.func=tt)
fit2 <- bass(X, y2, xx.func=tt)
goo = C_bassPCA_v2(fit1)
class(fit1)
np = 3
fit1 = bassPCA(X, y1, n.pc=np, n.cores=min(3, np))
fit2 = bassPCA(X, y2, n.pc=np, n.cores=min(3, np))
C1 = C_bassPCA_v2(fit1)
C2 = C_bassPCA_v2(fit2)
C2 = C_bassPCA_v2(fit2)
mod2
mod
m
fit2$mod.list
fit2$mod.list[[3]]
fit2$mod.list[[3]]$nbasis
fit2$mod.list[[2]]$nbasis
fit1$mod.list[[2]]$nbasis
fit1$mod.list[[1]]$nbasis
fit1$mod.list[[3]]$nbasis
plot(fit1$mod.list[[3]])
plot(fit1$mod.list[[2]])
plot(fit1$mod.list[[1]])
plot(fit1$mod.list[[2]])
plot(fit1$mod.list[[3]])
plot(fit1$mod.list[[1]])
C_bassPCA_v2(fit1)
C_bassPCA_v2(fit2)
indic2
X
dim(X)
i
C_bassPCA_v2(fit2)
dim(X)
document()
library(devtools)
document()
C_bassPCA_v2(fit2)
indic2
mod
mod2
mod2$vars.des
mod_number2
M2
mod_number
C_bassPCA_v2(fit1)
C_bassPCA_v2(fit2)
M2
M
M2
indic2      <- mod2$vars.des[mod_number2, 1:M2, ]
indic2
indic2      <- mod2$vars.des[mod_number2, 1:M2, ,drop=FALSE]
indic2
M
M2
M == 0 | M2 == 0
M == 0 || M2 == 0
any(c(M, M2) == 0)
document()
document()
C_bassPCA_v2(fit1)
C_bassPCA_v2(fit2)
i
j
C_bassPCA_v2(fit2)
p
document()
C_bassPCA_v2(fit2)
c(M, M2) > 0
devtools::document()
C_bassPCA_v2(fit2)
C_bassPCA_v2(fit1)
library(concordance)
library(concordance)
library(concordance)
C_bassPCA_v2(fit2)
modPCA = fit2
if(class(modPCA) != "bassBasis") stop("modPCA must be an object with class bassBasis")
# Get weights matrix
phi <- modPCA$dat$basis
nfunc <- nrow(phi)
if(is.null(func.use)) func.use <- 1:nfunc
func.use= NULL
if(is.null(func.use)) func.use <- 1:nfunc
# Get model list
mod_list <- modPCA$mod.list
# Get Cij for all model pairs
nbassmodels <- length(mod_list)
Cij <- list()
cnt <- 1
modPCA
prior
prior=NULL
mcmc.use=NULL
func.use=NULL
# Get weights matrix
phi <- modPCA$dat$basis
nfunc <- nrow(phi)
if(is.null(func.use)) func.use <- 1:nfunc
# Get model list
mod_list <- modPCA$mod.list
# Get Cij for all model pairs
nbassmodels <- length(mod_list)
Cij <- list()
cnt <- 1
for(i in 1:nbassmodels){
for(j in 1:nbassmodels){
if(i == j){
Cij[[cnt]] <- C_bass(mod_list[[i]], prior, mcmc.use)
}else{
Cij[[cnt]] <- Cfg_bass(mod_list[[i]], mod_list[[j]], prior, mcmc.use)
}
cnt <- cnt + 1
}
}
if(is.null(mcmc.use)){
# If null, just use last mcmc iteration
mcmc.use <- length(mod_list[[1]]$nbasis)
}
if(length(mcmc.use) == 1){
p <- nrow(Cij[[1]])
}else{
p <- nrow(Cij[[1]][[1]])
}
# Assemble C list for each t
Ct <- list()
for(t in seq_along(func.use)){
cnt <- 1
tt <- func.use[t]
# Initialize Ctmp
Ctmp <- list()
for(k in seq_along(mcmc.use)){
Ctmp[[k]] <- matrix(0, nrow=p, ncol=p)
}
for(i in 1:nbassmodels){
for(j in 1:nbassmodels){
curr <- Cij[[cnt]]
for(k in seq_along(mcmc.use)){
if(length(mcmc.use) == 1){
Ctmp[[k]] <- Ctmp[[k]] + phi[tt,i]*phi[tt,j]*Cij[[cnt]]
}else{
Ctmp[[k]] <- Ctmp[[k]] + phi[tt,i]*phi[tt,j]*Cij[[cnt]][[k]]
}
}
cnt <- cnt + 1
}
}
if(length(mcmc.use) == 1){
Ct[[t]] <- Ctmp[[1]]
}else{
Ct[[t]] <- Ctmp
}
}
dim(phi)
length(modPCA$mod.list)
C_bassPCA_v2(fit2)
document()
library(concordance)
library(concordance)
BASS:::plot.bass
